{"url":"http:\/\/localhost:8080\/index.php\/api\/attendance\/checkout","method":"POST","isAJAX":false,"startTime":1754289418.414748,"totalTime":817.2,"totalMemory":"7.580","segmentDuration":120,"segmentCount":7,"CI_VERSION":"4.6.1","collectors":[{"title":"Timers","titleSafe":"timers","titleDetails":"","display":[],"badgeValue":null,"isEmpty":false,"hasTabContent":false,"hasLabel":false,"icon":"","hasTimelineData":true,"timelineData":[{"name":"Bootstrap","component":"Timer","start":1754289418.47277,"duration":0.2342829704284668},{"name":"Required Before Filters","component":"Timer","start":1754289418.707056,"duration":0.03883194923400879},{"name":"Routing","component":"Timer","start":1754289418.745903,"duration":0.00944209098815918},{"name":"Before Filters","component":"Timer","start":1754289418.757756,"duration":0.003484964370727539},{"name":"Controller","component":"Timer","start":1754289418.761246,"duration":0.4675929546356201},{"name":"Controller Constructor","component":"Timer","start":1754289418.761249,"duration":0.16866302490234375},{"name":"After Filters","component":"Timer","start":1754289419.228917,"duration":0.003158092498779297}]},{"title":"Database","titleSafe":"database","titleDetails":"(2 total Queries, 2 of them unique across 1 Connection)","display":{"queries":[{"hover":"","class":"","duration":"24.98 ms","sql":"<strong>SELECT<\/strong> *\n<strong>FROM<\/strong> `attendances`\n<strong>WHERE<\/strong> `user_id` = &#039;7&#039;\n<strong>AND<\/strong> `attendance_date` = &#039;2025-08-04&#039;\n <strong>LIMIT<\/strong> 1","trace":[{"file":"SYSTEMPATH\\Database\\BaseBuilder.php:1649","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\Database\\BaseConnection->query()","index":"\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\Model.php:330","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\Database\\BaseBuilder->get()","index":"\u00a0\u00a02\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\BaseModel.php:717","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\Model->doFirst()","index":"\u00a0\u00a03\u00a0\u00a0\u00a0\u00a0"},{"file":"APPPATH\\Controllers\\api\\AttendanceController.php:108","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\BaseModel->first()","index":"\u00a0\u00a04\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\CodeIgniter.php:933","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0App\\Controllers\\api\\AttendanceController->checkout()","index":"\u00a0\u00a05\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\CodeIgniter.php:507","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\CodeIgniter->runController()","index":"\u00a0\u00a06\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\CodeIgniter.php:354","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\CodeIgniter->handleRequest()","index":"\u00a0\u00a07\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\Boot.php:334","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\CodeIgniter->run()","index":"\u00a0\u00a08\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\Boot.php:67","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\Boot::runCodeIgniter()","index":"\u00a0\u00a09\u00a0\u00a0\u00a0\u00a0"},{"file":"FCPATH\\index.php:59","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\Boot::bootWeb()","index":"\u00a010\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\rewrite.php:44","args":["E:\\laragon\\www\\apici\\public\\index.php"],"function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0require_once()","index":"\u00a011\u00a0\u00a0\u00a0\u00a0"}],"trace-file":"APPPATH\\Controllers\\api\\AttendanceController.php:108","qid":"3eb6bf5eacb18f44be95218bcb8152e3"},{"hover":"","class":"","duration":"26.12 ms","sql":"<strong>UPDATE<\/strong> `attendances` SET `time_out` = &#039;13:36:59&#039;, `latitude_out` = &#039;37.4219983&#039;, `longitude_out` = &#039;-122.084&#039;, `photo_out` = &#039;1754289419_570e3cae957c1fc4de51.jpg&#039;, `checkout_checklist` = &#039;import \\&#039;dart:async\\&#039;;\\nimport \\&#039;dart:io\\&#039;;\\nimport \\&#039;package:absensi\/pegawai\/screens\/dashboard_screen.dart\\&#039;;\\nimport \\&#039;package:flutter\/material.dart\\&#039;;\\nimport \\&#039;package:camera\/camera.dart\\&#039;;\\nimport \\&#039;package:geolocator\/geolocator.dart\\&#039;;\\nimport \\&#039;package:geocoding\/geocoding.dart\\&#039;;\\nimport \\&#039;package:google_maps_flutter\/google_maps_flutter.dart\\&#039;;\\nimport \\&#039;package:absensi\/services\/api_service.dart\\&#039;;\\nimport \\&#039;package:intl\/intl.dart\\&#039;;\\nimport \\&#039;package:shared_preferences\/shared_preferences.dart\\&#039;;\\n\\nclass OverTimeScreen extends StatefulWidget {\\n  const OverTimeScreen({super.key});\\n\\n  @override\\n  State&lt;OverTimeScreen&gt; createState() =&gt; _OverTimeScreenState();\\n}\\n\\nclass _OverTimeScreenState extends State&lt;OverTimeScreen&gt; {\\n  \/\/ BARU: Satu Future untuk mengelola semua proses inisialisasi\\n  late Future&lt;void&gt; _initializationFuture;\\n\\n  \/\/ State lainnya tetap sama\\n  CameraController? _cameraController;\\n  XFile? _capturedImage;\\n  Position? _currentPosition;\\n  String _currentAddress = \\&quot;Memuat alamat...\\&quot;;\\n  final Completer&lt;GoogleMapController&gt; _mapController = Completer();\\n  final _formKey = GlobalKey&lt;FormState&gt;();\\n  String? _selectedOvertimeType;\\n  bool _isSubmitting = false;\\n  DateTime? _startDate;\\n  DateTime? _endDate;\\n  TimeOfDay? _startTime;\\n  TimeOfDay? _endTime;\\n  final ApiService _apiService = ApiService();\\n  List&lt;dynamic&gt; _userList = [];\\n  Map&lt;String, dynamic&gt;? _selectedCoworker;\\n  bool _showRekanKerjaField = false;\\n  final _keteranganController = TextEditingController();\\n\\n\\n  final List&lt;String&gt; _overtimeTypes = [\\n    \\&#039;Hari Kerja\\&#039;, \\&#039;Hari Libur\\&#039;, \\&#039;Hari Libur Nasional\\&#039;, \\&#039;Backup Teman Kerja\\&#039;\\n  ];\\n\\n  @override\\n  void initState() {\\n    super.initState();\\n    \/\/ Panggil satu fungsi utama untuk memulai semua proses async\\n    _initializationFuture = _initializePage();\\n  }\\n\\n  @override\\n  void dispose() {\\n    _cameraController?.dispose();\\n    _keteranganController.dispose();\\n    super.dispose();\\n  }\\n\\n  \/\/ --- LOGIKA UTAMA ---\\n\\n  \/\/ BARU: Fungsi ini menggabungkan semua tugas berat\\n  Future&lt;void&gt; _initializePage() async {\\n    try {\\n      \/\/ Jalankan semua proses secara bersamaan untuk efisiensi\\n      await Future.wait([\\n        _initializeCamera(),\\n        _initializeLocation(),\\n        _fetchUsers(),\\n      ]);\\n    } catch (e) {\\n      \/\/ Jika salah satu gagal, seluruh Future akan gagal dan ditangkap oleh FutureBuilder\\n      throw Exception(\\&#039;Gagal memuat halaman: ${e.toString().replaceAll(\\&quot;Exception: \\&quot;, \\&quot;\\&quot;)}\\&#039;);\\n    }\\n  }\\n\\n  Future&lt;void&gt; _fetchUsers() async {\\n    try {\\n      final users = await _apiService.fetchUsers();\\n      if (mounted) {\\n        setState(() =&gt; _userList = users);\\n      }\\n    } catch (e) {\\n      print(\\&quot;Gagal memuat pengguna: $e\\&quot;);\\n    }\\n  }\\n\\n  Future&lt;void&gt; _initializeCamera() async {\\n    try {\\n      final cameras = await availableCameras();\\n      final firstCamera = cameras.firstWhere(\\n          (camera) =&gt; camera.lensDirection == CameraLensDirection.front,\\n          orElse: () =&gt; cameras.first);\\n      _cameraController = CameraController(firstCamera, ResolutionPreset.medium);\\n      await _cameraController!.initialize();\\n    } catch (e) {\\n      print(\\&quot;Error inisialisasi kamera: $e\\&quot;);\\n      throw Exception(\\&#039;Gagal memuat kamera\\&#039;);\\n    }\\n  }\\n\\n  Future&lt;void&gt; _initializeLocation() async {\\n    try {\\n      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();\\n      if (!serviceEnabled) throw Exception(\\&#039;Layanan lokasi (GPS) tidak aktif.\\&#039;);\\n\\n      LocationPermission permission = await Geolocator.checkPermission();\\n      if (permission == LocationPermission.denied) {\\n        permission = await Geolocator.requestPermission();\\n        if (permission == LocationPermission.denied) {\\n          throw Exception(\\&#039;Izin lokasi ditolak.\\&#039;);\\n        }\\n      }\\n      if (permission == LocationPermission.deniedForever) {\\n        throw Exception(\\&#039;Izin lokasi ditolak permanen. Mohon aktifkan dari pengaturan aplikasi.\\&#039;);\\n      }\\n\\n      Position position = await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.high);\\n      List&lt;Placemark&gt; placemarks = await placemarkFromCoordinates(position.latitude, position.longitude);\\n      \\n      if (mounted) {\\n        setState(() {\\n          _currentPosition = position;\\n          _currentAddress = \\&quot;${placemarks[0].street}, ${placemarks[0].subLocality}, ${placemarks[0].locality}\\&quot;;\\n        });\\n      }\\n    } catch (e) {\\n      if(mounted) {\\n        setState(() =&gt; _currentAddress = \\&quot;Gagal mendapatkan lokasi\\&quot;);\\n      }\\n      throw Exception(e.toString());\\n    }\\n  }\\n\\n  Future&lt;void&gt; _takePicture() async {\\n    if (_cameraController == null || !_cameraController!.value.isInitialized) return;\\n    try {\\n      final image = await _cameraController!.takePicture();\\n      if (mounted) setState(() =&gt; _capturedImage = image);\\n    } catch (e) {\\n      print(\\&quot;Error mengambil gambar: $e\\&quot;);\\n    }\\n  }\\n\\n  Future&lt;void&gt; _selectDate(BuildContext context, bool isStartDate) async {\\n    final DateTime? picked = await showDatePicker(\\n      context: context, initialDate: DateTime.now(), firstDate: DateTime(2020), lastDate: DateTime(2030),\\n    );\\n    if (picked != null &amp;&amp; mounted) {\\n      setState(() =&gt; isStartDate ? _startDate = picked : _endDate = picked);\\n    }\\n  }\\n\\n  Future&lt;void&gt; _selectTime(BuildContext context, bool isStartTime) async {\\n    final TimeOfDay? picked = await showTimePicker(\\n      context: context, initialTime: TimeOfDay.now(),\\n      builder: (context, child) =&gt; MediaQuery(data: MediaQuery.of(context).copyWith(alwaysUse24HourFormat: true), child: child!),\\n    );\\n    if (picked != null &amp;&amp; mounted) {\\n      setState(() =&gt; isStartTime ? _startTime = picked : _endTime = picked);\\n    }\\n  }\\n\\n  Future&lt;void&gt; _submitOvertime() async {\\n  \/\/ 1. Validasi form\\n  if (!_formKey.currentState!.validate()) return;\\n  if (_capturedImage == null) {\\n    ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text(\\&#039;Bukti lembur (foto) wajib diisi.\\&#039;), backgroundColor: Colors.red));\\n    return;\\n  }\\n  \/\/ Validasi tambahan untuk tanggal dan waktu\\n  if (_startDate == null || _endDate == null || _startTime == null || _endTime == null) {\\n    ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text(\\&#039;Semua tanggal dan waktu wajib diisi.\\&#039;), backgroundColor: Colors.red));\\n    return;\\n  }\\n\\n  if (mounted) setState(() =&gt; _isSubmitting = true);\\n\\n  try {\\n    \/\/ 2. Ambil User ID\\n    final prefs = await SharedPreferences.getInstance();\\n    final userId = prefs.getInt(\\&#039;user_id\\&#039;);\\n    if (userId == null) {\\n      throw Exception(\\&quot;Sesi berakhir. Mohon login kembali.\\&quot;);\\n    }\\n    \\n    \/\/ Ambil ID rekan kerja jika ada\\n    final coworkerId = _selectedCoworker?[\\&#039;id\\&#039;];\\n\\n    \/\/ 3. Kirim data ke API\\n    await _apiService.submitOvertime(\\n        userId: userId,\\n        overtimeType: _selectedOvertimeType!,\\n        startDate: _startDate!,\\n        endDate: _endDate!,\\n        startTime: _startTime!,\\n        endTime: _endTime!,\\n        keterangan: _keteranganController.text,\\n        imageFile: File(_capturedImage!.path),\\n        position: _currentPosition!,\\n        address: _currentAddress,\\n        coworkerId: coworkerId != null ? int.parse(coworkerId.toString()) : null,\\n    );\\n\\n    \/\/ 4. Handle respons jika berhasil\\n\\n    if (mounted) {\\n        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text(\\&#039;Pengajuan lembur berhasil dikirim!\\&#039;), backgroundColor: Colors.green));\\n        \\n        \/\/ Navigasi kembali ke DashboardScreen dan hapus semua halaman di atasnya\\n        Navigator.of(context).pushAndRemoveUntil(\\n         MaterialPageRoute(builder: (context) =&gt; const DashboardScreen()),\\n         (Route&lt;dynamic&gt; route) =&gt; false,\\n       );\\n    }\\n\\n  } catch (e) {\\n    \/\/ 5. Handle jika terjadi error\\n    if (mounted) {\\n      ScaffoldMessenger.of(context).showSnackBar(\\n        SnackBar(content: Text(e.toString().replaceAll(\\&quot;Exception: \\&quot;, \\&quot;\\&quot;)), backgroundColor: Colors.red)\\n      );\\n    }\\n  } finally {\\n    \/\/ Pastikan loading indicator berhenti\\n    if (mounted) {\\n      setState(() =&gt; _isSubmitting = false);\\n    }\\n  }\\n}\\n\\n  \/\/ --- UI (Tampilan) ---\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: const Text(\\&#039;Pengajuan Lembur\\&#039;),\\n        backgroundColor: Colors.indigo,\\n        foregroundColor: Colors.white,\\n      ),\\n      body: FutureBuilder&lt;void&gt;(\\n        future: _initializationFuture,\\n        builder: (context, snapshot) {\\n          \/\/ Saat inisialisasi sedang berjalan\\n          if (snapshot.connectionState == ConnectionState.waiting) {\\n            return const Center(\\n              child: Column(\\n                mainAxisAlignment: MainAxisAlignment.center,\\n                children: [\\n                  CircularProgressIndicator(),\\n                  SizedBox(height: 16),\\n                  Text(\\&quot;Mempersiapkan halaman...\\&quot;),\\n                ],\\n              ),\\n            );\\n          }\\n\\n          \/\/ Jika terjadi error saat inisialisasi\\n          if (snapshot.hasError) {\\n            return Center(\\n              child: Padding(\\n                padding: const EdgeInsets.all(20.0),\\n                child: Text(\\n                  \\&quot;Gagal memuat halaman:\\\\n${snapshot.error.toString().replaceAll(\\&quot;Exception: \\&quot;, \\&quot;\\&quot;)}\\&quot;,\\n                  textAlign: TextAlign.center,\\n                  style: const TextStyle(color: Colors.red, fontSize: 16),\\n                ),\\n              ),\\n            );\\n          }\\n\\n          \/\/ Jika inisialisasi berhasil, tampilkan form\\n          return _buildOvertimeForm();\\n        },\\n      ),\\n    );\\n  }\\n\\n  Widget _buildOvertimeForm() {\\n    return SingleChildScrollView(\\n      padding: const EdgeInsets.all(16.0),\\n      child: Form(\\n        key: _formKey,\\n        child: Column(\\n          crossAxisAlignment: CrossAxisAlignment.stretch,\\n          children: [\\n            _buildSectionCard(\\n              title: \\&#039;Detail Lembur\\&#039;,\\n              icon: Icons.work_history_outlined,\\n              content: Column(\\n                children: [\\n                  DropdownButtonFormField&lt;String&gt;(\\n                    value: _selectedOvertimeType,\\n                    hint: const Text(\\&#039;Pilih jenis lembur\\&#039;),\\n                    items: _overtimeTypes.map((String value) =&gt; DropdownMenuItem&lt;String&gt;(value: value, child: Text(value))).toList(),\\n                    onChanged: (newValue) {\\n                      setState(() {\\n                        _selectedOvertimeType = newValue;\\n                        _showRekanKerjaField = (newValue == \\&#039;Backup Teman Kerja\\&#039;);\\n                        _selectedCoworker = null;\\n                      });\\n                    },\\n                    validator: (value) =&gt; value == null ? \\&#039;Jenis lembur wajib dipilih\\&#039; : null,\\n                    decoration: const InputDecoration(border: OutlineInputBorder(), contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8)),\\n                  ),\\n                  \\n                  if (_showRekanKerjaField)\\n                    Padding(\\n                      padding: const EdgeInsets.only(top: 16.0),\\n                      child: _userList.isEmpty\\n                          ? const Center(child: Text(\\&quot;Tidak ada data rekan kerja.\\&quot;))\\n                          : DropdownButtonFormField&lt;Map&lt;String, dynamic&gt;&gt;(\\n                              value: _selectedCoworker, isExpanded: true,\\n                              hint: const Text(\\&#039;Pilih Rekan Kerja\\&#039;),\\n                              items: _userList.map((user) =&gt; DropdownMenuItem&lt;Map&lt;String, dynamic&gt;&gt;(\\n                                value: user,\\n                                child: Text(user[\\&#039;name\\&#039;] ?? \\&#039;Nama Tidak Ada\\&#039;),\\n                              )).toList(),\\n                              onChanged: (newValue) =&gt; setState(() =&gt; _selectedCoworker = newValue),\\n                              validator: (value) =&gt; (_showRekanKerjaField &amp;&amp; value == null) ? \\&#039;Rekan kerja wajib dipilih\\&#039; : null,\\n                              decoration: const InputDecoration(labelText: \\&#039;Nama Rekan Kerja\\&#039;, border: OutlineInputBorder()),\\n                            ),\\n                    ),\\n                  const SizedBox(height: 16),\\n                  Row(\\n                    children: [\\n                      Expanded(child: _buildDatePickerField(context, \\&#039;Tanggal Mulai\\&#039;, _startDate, true)),\\n                      const SizedBox(width: 16),\\n                      Expanded(child: _buildDatePickerField(context, \\&#039;Tanggal Selesai\\&#039;, _endDate, false)),\\n                    ],\\n                  ),\\n                  const SizedBox(height: 16),\\n                  Row(\\n                    children: [\\n                      Expanded(child: _buildTimePickerField(context, \\&#039;Waktu Mulai\\&#039;, _startTime, true)),\\n                      const SizedBox(width: 16),\\n                      Expanded(child: _buildTimePickerField(context, \\&#039;Waktu Selesai\\&#039;, _endTime, false)),\\n                    ],\\n                  ),\\n                  const SizedBox(height: 16),\\n                  \/\/ --- PENAMBAHAN FIELD KETERANGAN ---\\n                  TextFormField(\\n                    controller: _keteranganController,\\n                    decoration: const InputDecoration(\\n                      labelText: \\&#039;Keterangan Lembur\\&#039;,\\n                      hintText: \\&#039;Contoh: Menyelesaikan laporan bulanan\\&#039;,\\n                      border: OutlineInputBorder(),\\n                    ),\\n                    validator: (value) {\\n                      if (value == null || value.isEmpty) {\\n                        return \\&#039;Keterangan wajib diisi\\&#039;;\\n                      }\\n                      return null;\\n                    },\\n                    maxLines: 3,\\n                  ),\\n                ],\\n              ),\\n            ),\\n            const SizedBox(height: 16),\\n            _buildSectionCard(\\n              title: \\&#039;Bukti Lembur (Foto Wajah)\\&#039;,\\n              icon: Icons.camera_alt_outlined,\\n              content: Column(\\n                children: [\\n                  Container(\\n                    height: 300, width: double.infinity, clipBehavior: Clip.antiAlias,\\n                    decoration: BoxDecoration(color: Colors.black, border: Border.all(color: Colors.grey.shade300), borderRadius: BorderRadius.circular(8)),\\n                    child: _capturedImage != null\\n                        ? Image.file(File(_capturedImage!.path), fit: BoxFit.cover)\\n                        : (_cameraController != null &amp;&amp; _cameraController!.value.isInitialized)\\n                            ? CameraPreview(_cameraController!)\\n                            : const Center(child: Text(\\&quot;Kamera tidak tersedia\\&quot;, style: TextStyle(color: Colors.white))),\\n                  ),\\n                  const SizedBox(height: 8),\\n                  ElevatedButton.icon(\\n                    onPressed: _takePicture,\\n                    icon: const Icon(Icons.camera),\\n                    label: Text(_capturedImage == null ? \\&#039;Ambil Gambar\\&#039; : \\&#039;Ambil Ulang\\&#039;),\\n                  ),\\n                ],\\n              ),\\n            ),\\n            const SizedBox(height: 16),\\n            _buildSectionCard(\\n              title: \\&#039;Lokasi Lembur\\&#039;,\\n              icon: Icons.location_on_outlined,\\n              content: Column(\\n                children: [\\n                  SizedBox(\\n                    height: 200, width: double.infinity,\\n                    child: _currentPosition == null\\n                        ? Center(child: Text(_currentAddress))\\n                        : ClipRRect(\\n                            borderRadius: BorderRadius.circular(8),\\n                            child: GoogleMap(\\n                              mapType: MapType.normal,\\n                              initialCameraPosition: CameraPosition(target: LatLng(_currentPosition!.latitude, _currentPosition!.longitude), zoom: 17.0),\\n                              markers: {Marker(markerId: const MarkerId(\\&#039;currentLocation\\&#039;), position: LatLng(_currentPosition!.latitude, _currentPosition!.longitude))},\\n                              onMapCreated: (GoogleMapController controller) { if (!_mapController.isCompleted) _mapController.complete(controller); },\\n                              zoomGesturesEnabled: false, scrollGesturesEnabled: false,\\n                            ),\\n                          ),\\n                  ),\\n                  const SizedBox(height: 8),\\n                  Text(_currentAddress, textAlign: TextAlign.center, style: const TextStyle(fontSize: 12)),\\n                ],\\n              ),\\n            ),\\n            const SizedBox(height: 24),\\n            ElevatedButton(\\n              onPressed: _isSubmitting ? null : _submitOvertime,\\n              style: ElevatedButton.styleFrom(\\n                padding: const EdgeInsets.symmetric(vertical: 16), backgroundColor: Colors.indigo, foregroundColor: Colors.white,\\n                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\\n              ),\\n              child: _isSubmitting\\n                  ? const SizedBox(height: 20, width: 20, child: CircularProgressIndicator(color: Colors.white, strokeWidth: 3))\\n                  : const Text(\\&#039;AJUKAN LEMBUR\\&#039;, style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),\\n            ),\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n\\n  \/\/ --- Helper Widgets ---\\n  Widget _buildSectionCard({required String title, required IconData icon, required Widget content}) {\\n    return Card(\\n      elevation: 2, shadowColor: Colors.grey.withOpacity(0.2),\\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\\n      child: Padding(\\n        padding: const EdgeInsets.all(16.0),\\n        child: Column(\\n          crossAxisAlignment: CrossAxisAlignment.start,\\n          children: [\\n            Row(\\n              children: [\\n                Icon(icon, color: Colors.indigo.shade700, size: 20),\\n                const SizedBox(width: 8),\\n                Text(title, style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),\\n              ],\\n            ),\\n            const Divider(height: 24, thickness: 1, color: Color.fromARGB(255, 236, 236, 236)),\\n            content,\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n  \\n  Widget _buildDatePickerField(BuildContext context, String label, DateTime? date, bool isStartDate) {\\n    return InkWell(\\n      onTap: () =&gt; _selectDate(context, isStartDate),\\n      child: InputDecorator(\\n        decoration: InputDecoration(\\n          labelText: label, border: const OutlineInputBorder(), contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 16),\\n        ),\\n        child: Text(\\n          date != null ? DateFormat(\\&#039;dd-MM-yyyy\\&#039;).format(date) : \\&#039;Pilih tanggal\\&#039;,\\n          style: TextStyle(fontSize: 16, color: date == null ? Colors.grey.shade600 : Colors.black),\\n        ),\\n      ),\\n    );\\n  }\\n  \\n  Widget _buildTimePickerField(BuildContext context, String label, TimeOfDay? time, bool isStartTime) {\\n    return InkWell(\\n      onTap: () =&gt; _selectTime(context, isStartTime),\\n      child: InputDecorator(\\n        decoration: InputDecoration(\\n          labelText: label, border: const OutlineInputBorder(), contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 16),\\n        ),\\n        child: Text(\\n          time != null ? time.format(context) : \\&#039;Pilih waktu\\&#039;,\\n          style: TextStyle(fontSize: 16, color: time == null ? Colors.grey.shade600 : Colors.black),\\n        ),\\n      ),\\n    );\\n  }\\n}\\n&#039;, `address_out` = &#039;Google Building 43, Amphitheatre Parkway&#039;, `updated_at` = &#039;2025-08-04 13:36:59&#039;\n<strong>WHERE<\/strong> `attendances`.`id` <strong>IN<\/strong> (&#039;16&#039;)","trace":[{"file":"SYSTEMPATH\\Database\\BaseBuilder.php:2521","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\Database\\BaseConnection->query()","index":"\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\Model.php:461","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\Database\\BaseBuilder->update()","index":"\u00a0\u00a02\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\BaseModel.php:1031","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\Model->doUpdate()","index":"\u00a0\u00a03\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\Model.php:863","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\BaseModel->update()","index":"\u00a0\u00a04\u00a0\u00a0\u00a0\u00a0"},{"file":"APPPATH\\Controllers\\api\\AttendanceController.php:134","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\Model->update()","index":"\u00a0\u00a05\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\CodeIgniter.php:933","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0App\\Controllers\\api\\AttendanceController->checkout()","index":"\u00a0\u00a06\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\CodeIgniter.php:507","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\CodeIgniter->runController()","index":"\u00a0\u00a07\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\CodeIgniter.php:354","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\CodeIgniter->handleRequest()","index":"\u00a0\u00a08\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\Boot.php:334","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\CodeIgniter->run()","index":"\u00a0\u00a09\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\Boot.php:67","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\Boot::runCodeIgniter()","index":"\u00a010\u00a0\u00a0\u00a0\u00a0"},{"file":"FCPATH\\index.php:59","function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeIgniter\\Boot::bootWeb()","index":"\u00a011\u00a0\u00a0\u00a0\u00a0"},{"file":"SYSTEMPATH\\rewrite.php:44","args":["E:\\laragon\\www\\apici\\public\\index.php"],"function":"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0require_once()","index":"\u00a012\u00a0\u00a0\u00a0\u00a0"}],"trace-file":"APPPATH\\Controllers\\api\\AttendanceController.php:134","qid":"6e8a4b3254ee7974884a4829fe60def6"}]},"badgeValue":2,"isEmpty":false,"hasTabContent":true,"hasLabel":false,"icon":"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADMSURBVEhLY6A3YExLSwsA4nIycQDIDIhRWEBqamo\/UNF\/SjDQjF6ocZgAKPkRiFeEhoYyQ4WIBiA9QAuWAPEHqBAmgLqgHcolGQD1V4DMgHIxwbCxYD+QBqcKINseKo6eWrBioPrtQBq\/BcgY5ht0cUIYbBg2AJKkRxCNWkDQgtFUNJwtABr+F6igE8olGQD114HMgHIxAVDyAhA\/AlpSA8RYUwoeXAPVex5qHCbIyMgwBCkAuQJIY00huDBUz\/mUlBQDqHGjgBjAwAAACexpph6oHSQAAAAASUVORK5CYII=","hasTimelineData":true,"timelineData":[{"name":"Connecting to Database: \"default\"","component":"Database","start":1754289419.078525,"duration":"0.007487"},{"name":"Query","component":"Database","start":1754289419.102594,"duration":"0.024978","query":"<strong>SELECT<\/strong> *\n<strong>FROM<\/strong> `attendances`\n<strong>WHERE<\/strong> `user_id` = &#039;7&#039;\n<strong>AND<\/strong> `attendance_date` = &#039;2025-08-04&#039;\n <strong>LIMIT<\/strong> 1"},{"name":"Query","component":"Database","start":1754289419.175071,"duration":"0.026117","query":"<strong>UPDATE<\/strong> `attendances` SET `time_out` = &#039;13:36:59&#039;, `latitude_out` = &#039;37.4219983&#039;, `longitude_out` = &#039;-122.084&#039;, `photo_out` = &#039;1754289419_570e3cae957c1fc4de51.jpg&#039;, `checkout_checklist` = &#039;import \\&#039;dart:async\\&#039;;\\nimport \\&#039;dart:io\\&#039;;\\nimport \\&#039;package:absensi\/pegawai\/screens\/dashboard_screen.dart\\&#039;;\\nimport \\&#039;package:flutter\/material.dart\\&#039;;\\nimport \\&#039;package:camera\/camera.dart\\&#039;;\\nimport \\&#039;package:geolocator\/geolocator.dart\\&#039;;\\nimport \\&#039;package:geocoding\/geocoding.dart\\&#039;;\\nimport \\&#039;package:google_maps_flutter\/google_maps_flutter.dart\\&#039;;\\nimport \\&#039;package:absensi\/services\/api_service.dart\\&#039;;\\nimport \\&#039;package:intl\/intl.dart\\&#039;;\\nimport \\&#039;package:shared_preferences\/shared_preferences.dart\\&#039;;\\n\\nclass OverTimeScreen extends StatefulWidget {\\n  const OverTimeScreen({super.key});\\n\\n  @override\\n  State&lt;OverTimeScreen&gt; createState() =&gt; _OverTimeScreenState();\\n}\\n\\nclass _OverTimeScreenState extends State&lt;OverTimeScreen&gt; {\\n  \/\/ BARU: Satu Future untuk mengelola semua proses inisialisasi\\n  late Future&lt;void&gt; _initializationFuture;\\n\\n  \/\/ State lainnya tetap sama\\n  CameraController? _cameraController;\\n  XFile? _capturedImage;\\n  Position? _currentPosition;\\n  String _currentAddress = \\&quot;Memuat alamat...\\&quot;;\\n  final Completer&lt;GoogleMapController&gt; _mapController = Completer();\\n  final _formKey = GlobalKey&lt;FormState&gt;();\\n  String? _selectedOvertimeType;\\n  bool _isSubmitting = false;\\n  DateTime? _startDate;\\n  DateTime? _endDate;\\n  TimeOfDay? _startTime;\\n  TimeOfDay? _endTime;\\n  final ApiService _apiService = ApiService();\\n  List&lt;dynamic&gt; _userList = [];\\n  Map&lt;String, dynamic&gt;? _selectedCoworker;\\n  bool _showRekanKerjaField = false;\\n  final _keteranganController = TextEditingController();\\n\\n\\n  final List&lt;String&gt; _overtimeTypes = [\\n    \\&#039;Hari Kerja\\&#039;, \\&#039;Hari Libur\\&#039;, \\&#039;Hari Libur Nasional\\&#039;, \\&#039;Backup Teman Kerja\\&#039;\\n  ];\\n\\n  @override\\n  void initState() {\\n    super.initState();\\n    \/\/ Panggil satu fungsi utama untuk memulai semua proses async\\n    _initializationFuture = _initializePage();\\n  }\\n\\n  @override\\n  void dispose() {\\n    _cameraController?.dispose();\\n    _keteranganController.dispose();\\n    super.dispose();\\n  }\\n\\n  \/\/ --- LOGIKA UTAMA ---\\n\\n  \/\/ BARU: Fungsi ini menggabungkan semua tugas berat\\n  Future&lt;void&gt; _initializePage() async {\\n    try {\\n      \/\/ Jalankan semua proses secara bersamaan untuk efisiensi\\n      await Future.wait([\\n        _initializeCamera(),\\n        _initializeLocation(),\\n        _fetchUsers(),\\n      ]);\\n    } catch (e) {\\n      \/\/ Jika salah satu gagal, seluruh Future akan gagal dan ditangkap oleh FutureBuilder\\n      throw Exception(\\&#039;Gagal memuat halaman: ${e.toString().replaceAll(\\&quot;Exception: \\&quot;, \\&quot;\\&quot;)}\\&#039;);\\n    }\\n  }\\n\\n  Future&lt;void&gt; _fetchUsers() async {\\n    try {\\n      final users = await _apiService.fetchUsers();\\n      if (mounted) {\\n        setState(() =&gt; _userList = users);\\n      }\\n    } catch (e) {\\n      print(\\&quot;Gagal memuat pengguna: $e\\&quot;);\\n    }\\n  }\\n\\n  Future&lt;void&gt; _initializeCamera() async {\\n    try {\\n      final cameras = await availableCameras();\\n      final firstCamera = cameras.firstWhere(\\n          (camera) =&gt; camera.lensDirection == CameraLensDirection.front,\\n          orElse: () =&gt; cameras.first);\\n      _cameraController = CameraController(firstCamera, ResolutionPreset.medium);\\n      await _cameraController!.initialize();\\n    } catch (e) {\\n      print(\\&quot;Error inisialisasi kamera: $e\\&quot;);\\n      throw Exception(\\&#039;Gagal memuat kamera\\&#039;);\\n    }\\n  }\\n\\n  Future&lt;void&gt; _initializeLocation() async {\\n    try {\\n      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();\\n      if (!serviceEnabled) throw Exception(\\&#039;Layanan lokasi (GPS) tidak aktif.\\&#039;);\\n\\n      LocationPermission permission = await Geolocator.checkPermission();\\n      if (permission == LocationPermission.denied) {\\n        permission = await Geolocator.requestPermission();\\n        if (permission == LocationPermission.denied) {\\n          throw Exception(\\&#039;Izin lokasi ditolak.\\&#039;);\\n        }\\n      }\\n      if (permission == LocationPermission.deniedForever) {\\n        throw Exception(\\&#039;Izin lokasi ditolak permanen. Mohon aktifkan dari pengaturan aplikasi.\\&#039;);\\n      }\\n\\n      Position position = await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.high);\\n      List&lt;Placemark&gt; placemarks = await placemarkFromCoordinates(position.latitude, position.longitude);\\n      \\n      if (mounted) {\\n        setState(() {\\n          _currentPosition = position;\\n          _currentAddress = \\&quot;${placemarks[0].street}, ${placemarks[0].subLocality}, ${placemarks[0].locality}\\&quot;;\\n        });\\n      }\\n    } catch (e) {\\n      if(mounted) {\\n        setState(() =&gt; _currentAddress = \\&quot;Gagal mendapatkan lokasi\\&quot;);\\n      }\\n      throw Exception(e.toString());\\n    }\\n  }\\n\\n  Future&lt;void&gt; _takePicture() async {\\n    if (_cameraController == null || !_cameraController!.value.isInitialized) return;\\n    try {\\n      final image = await _cameraController!.takePicture();\\n      if (mounted) setState(() =&gt; _capturedImage = image);\\n    } catch (e) {\\n      print(\\&quot;Error mengambil gambar: $e\\&quot;);\\n    }\\n  }\\n\\n  Future&lt;void&gt; _selectDate(BuildContext context, bool isStartDate) async {\\n    final DateTime? picked = await showDatePicker(\\n      context: context, initialDate: DateTime.now(), firstDate: DateTime(2020), lastDate: DateTime(2030),\\n    );\\n    if (picked != null &amp;&amp; mounted) {\\n      setState(() =&gt; isStartDate ? _startDate = picked : _endDate = picked);\\n    }\\n  }\\n\\n  Future&lt;void&gt; _selectTime(BuildContext context, bool isStartTime) async {\\n    final TimeOfDay? picked = await showTimePicker(\\n      context: context, initialTime: TimeOfDay.now(),\\n      builder: (context, child) =&gt; MediaQuery(data: MediaQuery.of(context).copyWith(alwaysUse24HourFormat: true), child: child!),\\n    );\\n    if (picked != null &amp;&amp; mounted) {\\n      setState(() =&gt; isStartTime ? _startTime = picked : _endTime = picked);\\n    }\\n  }\\n\\n  Future&lt;void&gt; _submitOvertime() async {\\n  \/\/ 1. Validasi form\\n  if (!_formKey.currentState!.validate()) return;\\n  if (_capturedImage == null) {\\n    ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text(\\&#039;Bukti lembur (foto) wajib diisi.\\&#039;), backgroundColor: Colors.red));\\n    return;\\n  }\\n  \/\/ Validasi tambahan untuk tanggal dan waktu\\n  if (_startDate == null || _endDate == null || _startTime == null || _endTime == null) {\\n    ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text(\\&#039;Semua tanggal dan waktu wajib diisi.\\&#039;), backgroundColor: Colors.red));\\n    return;\\n  }\\n\\n  if (mounted) setState(() =&gt; _isSubmitting = true);\\n\\n  try {\\n    \/\/ 2. Ambil User ID\\n    final prefs = await SharedPreferences.getInstance();\\n    final userId = prefs.getInt(\\&#039;user_id\\&#039;);\\n    if (userId == null) {\\n      throw Exception(\\&quot;Sesi berakhir. Mohon login kembali.\\&quot;);\\n    }\\n    \\n    \/\/ Ambil ID rekan kerja jika ada\\n    final coworkerId = _selectedCoworker?[\\&#039;id\\&#039;];\\n\\n    \/\/ 3. Kirim data ke API\\n    await _apiService.submitOvertime(\\n        userId: userId,\\n        overtimeType: _selectedOvertimeType!,\\n        startDate: _startDate!,\\n        endDate: _endDate!,\\n        startTime: _startTime!,\\n        endTime: _endTime!,\\n        keterangan: _keteranganController.text,\\n        imageFile: File(_capturedImage!.path),\\n        position: _currentPosition!,\\n        address: _currentAddress,\\n        coworkerId: coworkerId != null ? int.parse(coworkerId.toString()) : null,\\n    );\\n\\n    \/\/ 4. Handle respons jika berhasil\\n\\n    if (mounted) {\\n        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text(\\&#039;Pengajuan lembur berhasil dikirim!\\&#039;), backgroundColor: Colors.green));\\n        \\n        \/\/ Navigasi kembali ke DashboardScreen dan hapus semua halaman di atasnya\\n        Navigator.of(context).pushAndRemoveUntil(\\n         MaterialPageRoute(builder: (context) =&gt; const DashboardScreen()),\\n         (Route&lt;dynamic&gt; route) =&gt; false,\\n       );\\n    }\\n\\n  } catch (e) {\\n    \/\/ 5. Handle jika terjadi error\\n    if (mounted) {\\n      ScaffoldMessenger.of(context).showSnackBar(\\n        SnackBar(content: Text(e.toString().replaceAll(\\&quot;Exception: \\&quot;, \\&quot;\\&quot;)), backgroundColor: Colors.red)\\n      );\\n    }\\n  } finally {\\n    \/\/ Pastikan loading indicator berhenti\\n    if (mounted) {\\n      setState(() =&gt; _isSubmitting = false);\\n    }\\n  }\\n}\\n\\n  \/\/ --- UI (Tampilan) ---\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      appBar: AppBar(\\n        title: const Text(\\&#039;Pengajuan Lembur\\&#039;),\\n        backgroundColor: Colors.indigo,\\n        foregroundColor: Colors.white,\\n      ),\\n      body: FutureBuilder&lt;void&gt;(\\n        future: _initializationFuture,\\n        builder: (context, snapshot) {\\n          \/\/ Saat inisialisasi sedang berjalan\\n          if (snapshot.connectionState == ConnectionState.waiting) {\\n            return const Center(\\n              child: Column(\\n                mainAxisAlignment: MainAxisAlignment.center,\\n                children: [\\n                  CircularProgressIndicator(),\\n                  SizedBox(height: 16),\\n                  Text(\\&quot;Mempersiapkan halaman...\\&quot;),\\n                ],\\n              ),\\n            );\\n          }\\n\\n          \/\/ Jika terjadi error saat inisialisasi\\n          if (snapshot.hasError) {\\n            return Center(\\n              child: Padding(\\n                padding: const EdgeInsets.all(20.0),\\n                child: Text(\\n                  \\&quot;Gagal memuat halaman:\\\\n${snapshot.error.toString().replaceAll(\\&quot;Exception: \\&quot;, \\&quot;\\&quot;)}\\&quot;,\\n                  textAlign: TextAlign.center,\\n                  style: const TextStyle(color: Colors.red, fontSize: 16),\\n                ),\\n              ),\\n            );\\n          }\\n\\n          \/\/ Jika inisialisasi berhasil, tampilkan form\\n          return _buildOvertimeForm();\\n        },\\n      ),\\n    );\\n  }\\n\\n  Widget _buildOvertimeForm() {\\n    return SingleChildScrollView(\\n      padding: const EdgeInsets.all(16.0),\\n      child: Form(\\n        key: _formKey,\\n        child: Column(\\n          crossAxisAlignment: CrossAxisAlignment.stretch,\\n          children: [\\n            _buildSectionCard(\\n              title: \\&#039;Detail Lembur\\&#039;,\\n              icon: Icons.work_history_outlined,\\n              content: Column(\\n                children: [\\n                  DropdownButtonFormField&lt;String&gt;(\\n                    value: _selectedOvertimeType,\\n                    hint: const Text(\\&#039;Pilih jenis lembur\\&#039;),\\n                    items: _overtimeTypes.map((String value) =&gt; DropdownMenuItem&lt;String&gt;(value: value, child: Text(value))).toList(),\\n                    onChanged: (newValue) {\\n                      setState(() {\\n                        _selectedOvertimeType = newValue;\\n                        _showRekanKerjaField = (newValue == \\&#039;Backup Teman Kerja\\&#039;);\\n                        _selectedCoworker = null;\\n                      });\\n                    },\\n                    validator: (value) =&gt; value == null ? \\&#039;Jenis lembur wajib dipilih\\&#039; : null,\\n                    decoration: const InputDecoration(border: OutlineInputBorder(), contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8)),\\n                  ),\\n                  \\n                  if (_showRekanKerjaField)\\n                    Padding(\\n                      padding: const EdgeInsets.only(top: 16.0),\\n                      child: _userList.isEmpty\\n                          ? const Center(child: Text(\\&quot;Tidak ada data rekan kerja.\\&quot;))\\n                          : DropdownButtonFormField&lt;Map&lt;String, dynamic&gt;&gt;(\\n                              value: _selectedCoworker, isExpanded: true,\\n                              hint: const Text(\\&#039;Pilih Rekan Kerja\\&#039;),\\n                              items: _userList.map((user) =&gt; DropdownMenuItem&lt;Map&lt;String, dynamic&gt;&gt;(\\n                                value: user,\\n                                child: Text(user[\\&#039;name\\&#039;] ?? \\&#039;Nama Tidak Ada\\&#039;),\\n                              )).toList(),\\n                              onChanged: (newValue) =&gt; setState(() =&gt; _selectedCoworker = newValue),\\n                              validator: (value) =&gt; (_showRekanKerjaField &amp;&amp; value == null) ? \\&#039;Rekan kerja wajib dipilih\\&#039; : null,\\n                              decoration: const InputDecoration(labelText: \\&#039;Nama Rekan Kerja\\&#039;, border: OutlineInputBorder()),\\n                            ),\\n                    ),\\n                  const SizedBox(height: 16),\\n                  Row(\\n                    children: [\\n                      Expanded(child: _buildDatePickerField(context, \\&#039;Tanggal Mulai\\&#039;, _startDate, true)),\\n                      const SizedBox(width: 16),\\n                      Expanded(child: _buildDatePickerField(context, \\&#039;Tanggal Selesai\\&#039;, _endDate, false)),\\n                    ],\\n                  ),\\n                  const SizedBox(height: 16),\\n                  Row(\\n                    children: [\\n                      Expanded(child: _buildTimePickerField(context, \\&#039;Waktu Mulai\\&#039;, _startTime, true)),\\n                      const SizedBox(width: 16),\\n                      Expanded(child: _buildTimePickerField(context, \\&#039;Waktu Selesai\\&#039;, _endTime, false)),\\n                    ],\\n                  ),\\n                  const SizedBox(height: 16),\\n                  \/\/ --- PENAMBAHAN FIELD KETERANGAN ---\\n                  TextFormField(\\n                    controller: _keteranganController,\\n                    decoration: const InputDecoration(\\n                      labelText: \\&#039;Keterangan Lembur\\&#039;,\\n                      hintText: \\&#039;Contoh: Menyelesaikan laporan bulanan\\&#039;,\\n                      border: OutlineInputBorder(),\\n                    ),\\n                    validator: (value) {\\n                      if (value == null || value.isEmpty) {\\n                        return \\&#039;Keterangan wajib diisi\\&#039;;\\n                      }\\n                      return null;\\n                    },\\n                    maxLines: 3,\\n                  ),\\n                ],\\n              ),\\n            ),\\n            const SizedBox(height: 16),\\n            _buildSectionCard(\\n              title: \\&#039;Bukti Lembur (Foto Wajah)\\&#039;,\\n              icon: Icons.camera_alt_outlined,\\n              content: Column(\\n                children: [\\n                  Container(\\n                    height: 300, width: double.infinity, clipBehavior: Clip.antiAlias,\\n                    decoration: BoxDecoration(color: Colors.black, border: Border.all(color: Colors.grey.shade300), borderRadius: BorderRadius.circular(8)),\\n                    child: _capturedImage != null\\n                        ? Image.file(File(_capturedImage!.path), fit: BoxFit.cover)\\n                        : (_cameraController != null &amp;&amp; _cameraController!.value.isInitialized)\\n                            ? CameraPreview(_cameraController!)\\n                            : const Center(child: Text(\\&quot;Kamera tidak tersedia\\&quot;, style: TextStyle(color: Colors.white))),\\n                  ),\\n                  const SizedBox(height: 8),\\n                  ElevatedButton.icon(\\n                    onPressed: _takePicture,\\n                    icon: const Icon(Icons.camera),\\n                    label: Text(_capturedImage == null ? \\&#039;Ambil Gambar\\&#039; : \\&#039;Ambil Ulang\\&#039;),\\n                  ),\\n                ],\\n              ),\\n            ),\\n            const SizedBox(height: 16),\\n            _buildSectionCard(\\n              title: \\&#039;Lokasi Lembur\\&#039;,\\n              icon: Icons.location_on_outlined,\\n              content: Column(\\n                children: [\\n                  SizedBox(\\n                    height: 200, width: double.infinity,\\n                    child: _currentPosition == null\\n                        ? Center(child: Text(_currentAddress))\\n                        : ClipRRect(\\n                            borderRadius: BorderRadius.circular(8),\\n                            child: GoogleMap(\\n                              mapType: MapType.normal,\\n                              initialCameraPosition: CameraPosition(target: LatLng(_currentPosition!.latitude, _currentPosition!.longitude), zoom: 17.0),\\n                              markers: {Marker(markerId: const MarkerId(\\&#039;currentLocation\\&#039;), position: LatLng(_currentPosition!.latitude, _currentPosition!.longitude))},\\n                              onMapCreated: (GoogleMapController controller) { if (!_mapController.isCompleted) _mapController.complete(controller); },\\n                              zoomGesturesEnabled: false, scrollGesturesEnabled: false,\\n                            ),\\n                          ),\\n                  ),\\n                  const SizedBox(height: 8),\\n                  Text(_currentAddress, textAlign: TextAlign.center, style: const TextStyle(fontSize: 12)),\\n                ],\\n              ),\\n            ),\\n            const SizedBox(height: 24),\\n            ElevatedButton(\\n              onPressed: _isSubmitting ? null : _submitOvertime,\\n              style: ElevatedButton.styleFrom(\\n                padding: const EdgeInsets.symmetric(vertical: 16), backgroundColor: Colors.indigo, foregroundColor: Colors.white,\\n                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\\n              ),\\n              child: _isSubmitting\\n                  ? const SizedBox(height: 20, width: 20, child: CircularProgressIndicator(color: Colors.white, strokeWidth: 3))\\n                  : const Text(\\&#039;AJUKAN LEMBUR\\&#039;, style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),\\n            ),\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n\\n  \/\/ --- Helper Widgets ---\\n  Widget _buildSectionCard({required String title, required IconData icon, required Widget content}) {\\n    return Card(\\n      elevation: 2, shadowColor: Colors.grey.withOpacity(0.2),\\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\\n      child: Padding(\\n        padding: const EdgeInsets.all(16.0),\\n        child: Column(\\n          crossAxisAlignment: CrossAxisAlignment.start,\\n          children: [\\n            Row(\\n              children: [\\n                Icon(icon, color: Colors.indigo.shade700, size: 20),\\n                const SizedBox(width: 8),\\n                Text(title, style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),\\n              ],\\n            ),\\n            const Divider(height: 24, thickness: 1, color: Color.fromARGB(255, 236, 236, 236)),\\n            content,\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n  \\n  Widget _buildDatePickerField(BuildContext context, String label, DateTime? date, bool isStartDate) {\\n    return InkWell(\\n      onTap: () =&gt; _selectDate(context, isStartDate),\\n      child: InputDecorator(\\n        decoration: InputDecoration(\\n          labelText: label, border: const OutlineInputBorder(), contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 16),\\n        ),\\n        child: Text(\\n          date != null ? DateFormat(\\&#039;dd-MM-yyyy\\&#039;).format(date) : \\&#039;Pilih tanggal\\&#039;,\\n          style: TextStyle(fontSize: 16, color: date == null ? Colors.grey.shade600 : Colors.black),\\n        ),\\n      ),\\n    );\\n  }\\n  \\n  Widget _buildTimePickerField(BuildContext context, String label, TimeOfDay? time, bool isStartTime) {\\n    return InkWell(\\n      onTap: () =&gt; _selectTime(context, isStartTime),\\n      child: InputDecorator(\\n        decoration: InputDecoration(\\n          labelText: label, border: const OutlineInputBorder(), contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 16),\\n        ),\\n        child: Text(\\n          time != null ? time.format(context) : \\&#039;Pilih waktu\\&#039;,\\n          style: TextStyle(fontSize: 16, color: time == null ? Colors.grey.shade600 : Colors.black),\\n        ),\\n      ),\\n    );\\n  }\\n}\\n&#039;, `address_out` = &#039;Google Building 43, Amphitheatre Parkway&#039;, `updated_at` = &#039;2025-08-04 13:36:59&#039;\n<strong>WHERE<\/strong> `attendances`.`id` <strong>IN<\/strong> (&#039;16&#039;)"}]},{"title":"Logs","titleSafe":"logs","titleDetails":"","display":{"logs":[]},"badgeValue":null,"isEmpty":true,"hasTabContent":true,"hasLabel":false,"icon":"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACYSURBVEhLYxgFJIHU1FSjtLS0i0D8AYj7gEKMEBkqAaAFF4D4ERCvAFrwH4gDoFIMKSkpFkB+OTEYqgUTACXfA\/GqjIwMQyD9H2hRHlQKJFcBEiMGQ7VgAqCBvUgK32dmZspCpagGGNPT0\/1BLqeF4bQHQJePpiIwhmrBBEADR1MRfgB0+WgqAmOoFkwANHA0FY0CUgEDAwCQ0PUpNB3kqwAAAABJRU5ErkJggg==","hasTimelineData":false,"timelineData":[]},{"title":"Views","titleSafe":"views","titleDetails":"","display":[],"badgeValue":0,"isEmpty":false,"hasTabContent":false,"hasLabel":true,"icon":"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADeSURBVEhL7ZSxDcIwEEWNYA0YgGmgyAaJLTcUaaBzQQEVjMEabBQxAdw53zTHiThEovGTfnE\/9rsoRUxhKLOmaa6Uh7X2+UvguLCzVxN1XW9x4EYHzik033Hp3X0LO+DaQG8MDQcuq6qao4qkHuMgQggLvkPLjqh00ZgFDBacMJYFkuwFlH1mshdkZ5JPJERA9JpI6xNCBESvibQ+IURA9JpI6xNCBESvibQ+IURA9DTsuHTOrVFFxixgB\/eUFlU8uKJ0eDBFOu\/9EvoeKnlJS2\/08Tc8NOwQ8sIfMeYFjqKDjdU2sp4AAAAASUVORK5CYII=","hasTimelineData":true,"timelineData":[]},{"title":"Files","titleSafe":"files","titleDetails":"( 172 )","display":{"coreFiles":[{"path":"SYSTEMPATH\\API\\ResponseTrait.php","name":"ResponseTrait.php"},{"path":"SYSTEMPATH\\Autoloader\\Autoloader.php","name":"Autoloader.php"},{"path":"SYSTEMPATH\\Autoloader\\FileLocator.php","name":"FileLocator.php"},{"path":"SYSTEMPATH\\Autoloader\\FileLocatorInterface.php","name":"FileLocatorInterface.php"},{"path":"SYSTEMPATH\\BaseModel.php","name":"BaseModel.php"},{"path":"SYSTEMPATH\\Boot.php","name":"Boot.php"},{"path":"SYSTEMPATH\\Cache\\CacheFactory.php","name":"CacheFactory.php"},{"path":"SYSTEMPATH\\Cache\\CacheInterface.php","name":"CacheInterface.php"},{"path":"SYSTEMPATH\\Cache\\Handlers\\BaseHandler.php","name":"BaseHandler.php"},{"path":"SYSTEMPATH\\Cache\\Handlers\\FileHandler.php","name":"FileHandler.php"},{"path":"SYSTEMPATH\\Cache\\ResponseCache.php","name":"ResponseCache.php"},{"path":"SYSTEMPATH\\CodeIgniter.php","name":"CodeIgniter.php"},{"path":"SYSTEMPATH\\Common.php","name":"Common.php"},{"path":"SYSTEMPATH\\Config\\AutoloadConfig.php","name":"AutoloadConfig.php"},{"path":"SYSTEMPATH\\Config\\BaseConfig.php","name":"BaseConfig.php"},{"path":"SYSTEMPATH\\Config\\BaseService.php","name":"BaseService.php"},{"path":"SYSTEMPATH\\Config\\DotEnv.php","name":"DotEnv.php"},{"path":"SYSTEMPATH\\Config\\Factories.php","name":"Factories.php"},{"path":"SYSTEMPATH\\Config\\Factory.php","name":"Factory.php"},{"path":"SYSTEMPATH\\Config\\Filters.php","name":"Filters.php"},{"path":"SYSTEMPATH\\Config\\Routing.php","name":"Routing.php"},{"path":"SYSTEMPATH\\Config\\Services.php","name":"Services.php"},{"path":"SYSTEMPATH\\Config\\View.php","name":"View.php"},{"path":"SYSTEMPATH\\Controller.php","name":"Controller.php"},{"path":"SYSTEMPATH\\Cookie\\CloneableCookieInterface.php","name":"CloneableCookieInterface.php"},{"path":"SYSTEMPATH\\Cookie\\Cookie.php","name":"Cookie.php"},{"path":"SYSTEMPATH\\Cookie\\CookieInterface.php","name":"CookieInterface.php"},{"path":"SYSTEMPATH\\Cookie\\CookieStore.php","name":"CookieStore.php"},{"path":"SYSTEMPATH\\Database\\BaseBuilder.php","name":"BaseBuilder.php"},{"path":"SYSTEMPATH\\Database\\BaseConnection.php","name":"BaseConnection.php"},{"path":"SYSTEMPATH\\Database\\BaseResult.php","name":"BaseResult.php"},{"path":"SYSTEMPATH\\Database\\Config.php","name":"Config.php"},{"path":"SYSTEMPATH\\Database\\ConnectionInterface.php","name":"ConnectionInterface.php"},{"path":"SYSTEMPATH\\Database\\Database.php","name":"Database.php"},{"path":"SYSTEMPATH\\Database\\MySQLi\\Builder.php","name":"Builder.php"},{"path":"SYSTEMPATH\\Database\\MySQLi\\Connection.php","name":"Connection.php"},{"path":"SYSTEMPATH\\Database\\MySQLi\\Result.php","name":"Result.php"},{"path":"SYSTEMPATH\\Database\\Query.php","name":"Query.php"},{"path":"SYSTEMPATH\\Database\\QueryInterface.php","name":"QueryInterface.php"},{"path":"SYSTEMPATH\\Database\\ResultInterface.php","name":"ResultInterface.php"},{"path":"SYSTEMPATH\\Debug\\Exceptions.php","name":"Exceptions.php"},{"path":"SYSTEMPATH\\Debug\\Timer.php","name":"Timer.php"},{"path":"SYSTEMPATH\\Debug\\Toolbar.php","name":"Toolbar.php"},{"path":"SYSTEMPATH\\Debug\\Toolbar\\Collectors\\BaseCollector.php","name":"BaseCollector.php"},{"path":"SYSTEMPATH\\Debug\\Toolbar\\Collectors\\Database.php","name":"Database.php"},{"path":"SYSTEMPATH\\Debug\\Toolbar\\Collectors\\Events.php","name":"Events.php"},{"path":"SYSTEMPATH\\Debug\\Toolbar\\Collectors\\Files.php","name":"Files.php"},{"path":"SYSTEMPATH\\Debug\\Toolbar\\Collectors\\Logs.php","name":"Logs.php"},{"path":"SYSTEMPATH\\Debug\\Toolbar\\Collectors\\Routes.php","name":"Routes.php"},{"path":"SYSTEMPATH\\Debug\\Toolbar\\Collectors\\Timers.php","name":"Timers.php"},{"path":"SYSTEMPATH\\Debug\\Toolbar\\Collectors\\Views.php","name":"Views.php"},{"path":"SYSTEMPATH\\Events\\Events.php","name":"Events.php"},{"path":"SYSTEMPATH\\Files\\File.php","name":"File.php"},{"path":"SYSTEMPATH\\Filters\\DebugToolbar.php","name":"DebugToolbar.php"},{"path":"SYSTEMPATH\\Filters\\FilterInterface.php","name":"FilterInterface.php"},{"path":"SYSTEMPATH\\Filters\\Filters.php","name":"Filters.php"},{"path":"SYSTEMPATH\\Filters\\ForceHTTPS.php","name":"ForceHTTPS.php"},{"path":"SYSTEMPATH\\Filters\\PageCache.php","name":"PageCache.php"},{"path":"SYSTEMPATH\\Format\\Format.php","name":"Format.php"},{"path":"SYSTEMPATH\\Format\\FormatterInterface.php","name":"FormatterInterface.php"},{"path":"SYSTEMPATH\\Format\\JSONFormatter.php","name":"JSONFormatter.php"},{"path":"SYSTEMPATH\\HTTP\\ContentSecurityPolicy.php","name":"ContentSecurityPolicy.php"},{"path":"SYSTEMPATH\\HTTP\\Files\\FileCollection.php","name":"FileCollection.php"},{"path":"SYSTEMPATH\\HTTP\\Files\\UploadedFile.php","name":"UploadedFile.php"},{"path":"SYSTEMPATH\\HTTP\\Files\\UploadedFileInterface.php","name":"UploadedFileInterface.php"},{"path":"SYSTEMPATH\\HTTP\\Header.php","name":"Header.php"},{"path":"SYSTEMPATH\\HTTP\\IncomingRequest.php","name":"IncomingRequest.php"},{"path":"SYSTEMPATH\\HTTP\\Message.php","name":"Message.php"},{"path":"SYSTEMPATH\\HTTP\\MessageInterface.php","name":"MessageInterface.php"},{"path":"SYSTEMPATH\\HTTP\\MessageTrait.php","name":"MessageTrait.php"},{"path":"SYSTEMPATH\\HTTP\\Method.php","name":"Method.php"},{"path":"SYSTEMPATH\\HTTP\\OutgoingRequest.php","name":"OutgoingRequest.php"},{"path":"SYSTEMPATH\\HTTP\\OutgoingRequestInterface.php","name":"OutgoingRequestInterface.php"},{"path":"SYSTEMPATH\\HTTP\\Request.php","name":"Request.php"},{"path":"SYSTEMPATH\\HTTP\\RequestInterface.php","name":"RequestInterface.php"},{"path":"SYSTEMPATH\\HTTP\\RequestTrait.php","name":"RequestTrait.php"},{"path":"SYSTEMPATH\\HTTP\\Response.php","name":"Response.php"},{"path":"SYSTEMPATH\\HTTP\\ResponseInterface.php","name":"ResponseInterface.php"},{"path":"SYSTEMPATH\\HTTP\\ResponseTrait.php","name":"ResponseTrait.php"},{"path":"SYSTEMPATH\\HTTP\\SiteURI.php","name":"SiteURI.php"},{"path":"SYSTEMPATH\\HTTP\\SiteURIFactory.php","name":"SiteURIFactory.php"},{"path":"SYSTEMPATH\\HTTP\\URI.php","name":"URI.php"},{"path":"SYSTEMPATH\\HTTP\\UserAgent.php","name":"UserAgent.php"},{"path":"SYSTEMPATH\\Helpers\\Array\\ArrayHelper.php","name":"ArrayHelper.php"},{"path":"SYSTEMPATH\\Helpers\\array_helper.php","name":"array_helper.php"},{"path":"SYSTEMPATH\\Helpers\\filesystem_helper.php","name":"filesystem_helper.php"},{"path":"SYSTEMPATH\\Helpers\\kint_helper.php","name":"kint_helper.php"},{"path":"SYSTEMPATH\\Helpers\\url_helper.php","name":"url_helper.php"},{"path":"SYSTEMPATH\\I18n\\Time.php","name":"Time.php"},{"path":"SYSTEMPATH\\I18n\\TimeTrait.php","name":"TimeTrait.php"},{"path":"SYSTEMPATH\\Log\\Logger.php","name":"Logger.php"},{"path":"SYSTEMPATH\\Model.php","name":"Model.php"},{"path":"SYSTEMPATH\\Modules\\Modules.php","name":"Modules.php"},{"path":"SYSTEMPATH\\RESTful\\BaseResource.php","name":"BaseResource.php"},{"path":"SYSTEMPATH\\RESTful\\ResourceController.php","name":"ResourceController.php"},{"path":"SYSTEMPATH\\Router\\RouteCollection.php","name":"RouteCollection.php"},{"path":"SYSTEMPATH\\Router\\RouteCollectionInterface.php","name":"RouteCollectionInterface.php"},{"path":"SYSTEMPATH\\Router\\Router.php","name":"Router.php"},{"path":"SYSTEMPATH\\Router\\RouterInterface.php","name":"RouterInterface.php"},{"path":"SYSTEMPATH\\Superglobals.php","name":"Superglobals.php"},{"path":"SYSTEMPATH\\ThirdParty\\Kint\\FacadeInterface.php","name":"FacadeInterface.php"},{"path":"SYSTEMPATH\\ThirdParty\\Kint\\Kint.php","name":"Kint.php"},{"path":"SYSTEMPATH\\ThirdParty\\Kint\\Renderer\\AbstractRenderer.php","name":"AbstractRenderer.php"},{"path":"SYSTEMPATH\\ThirdParty\\Kint\\Renderer\\AssetRendererTrait.php","name":"AssetRendererTrait.php"},{"path":"SYSTEMPATH\\ThirdParty\\Kint\\Renderer\\CliRenderer.php","name":"CliRenderer.php"},{"path":"SYSTEMPATH\\ThirdParty\\Kint\\Renderer\\ConstructableRendererInterface.php","name":"ConstructableRendererInterface.php"},{"path":"SYSTEMPATH\\ThirdParty\\Kint\\Renderer\\RendererInterface.php","name":"RendererInterface.php"},{"path":"SYSTEMPATH\\ThirdParty\\Kint\\Renderer\\RichRenderer.php","name":"RichRenderer.php"},{"path":"SYSTEMPATH\\ThirdParty\\Kint\\Renderer\\TextRenderer.php","name":"TextRenderer.php"},{"path":"SYSTEMPATH\\ThirdParty\\Kint\\Utils.php","name":"Utils.php"},{"path":"SYSTEMPATH\\ThirdParty\\Kint\\init.php","name":"init.php"},{"path":"SYSTEMPATH\\ThirdParty\\Kint\\init_helpers.php","name":"init_helpers.php"},{"path":"SYSTEMPATH\\Traits\\ConditionalTrait.php","name":"ConditionalTrait.php"},{"path":"SYSTEMPATH\\Validation\\CreditCardRules.php","name":"CreditCardRules.php"},{"path":"SYSTEMPATH\\Validation\\DotArrayFilter.php","name":"DotArrayFilter.php"},{"path":"SYSTEMPATH\\Validation\\FormatRules.php","name":"FormatRules.php"},{"path":"SYSTEMPATH\\Validation\\Rules.php","name":"Rules.php"},{"path":"SYSTEMPATH\\Validation\\StrictRules\\CreditCardRules.php","name":"CreditCardRules.php"},{"path":"SYSTEMPATH\\Validation\\StrictRules\\FileRules.php","name":"FileRules.php"},{"path":"SYSTEMPATH\\Validation\\StrictRules\\FormatRules.php","name":"FormatRules.php"},{"path":"SYSTEMPATH\\Validation\\StrictRules\\Rules.php","name":"Rules.php"},{"path":"SYSTEMPATH\\Validation\\Validation.php","name":"Validation.php"},{"path":"SYSTEMPATH\\Validation\\ValidationInterface.php","name":"ValidationInterface.php"},{"path":"SYSTEMPATH\\View\\RendererInterface.php","name":"RendererInterface.php"},{"path":"SYSTEMPATH\\View\\View.php","name":"View.php"},{"path":"SYSTEMPATH\\View\\ViewDecoratorTrait.php","name":"ViewDecoratorTrait.php"},{"path":"SYSTEMPATH\\rewrite.php","name":"rewrite.php"}],"userFiles":[{"path":"APPPATH\\Common.php","name":"Common.php"},{"path":"APPPATH\\Config\\App.php","name":"App.php"},{"path":"APPPATH\\Config\\Autoload.php","name":"Autoload.php"},{"path":"APPPATH\\Config\\Boot\\development.php","name":"development.php"},{"path":"APPPATH\\Config\\Cache.php","name":"Cache.php"},{"path":"APPPATH\\Config\\Constants.php","name":"Constants.php"},{"path":"APPPATH\\Config\\ContentSecurityPolicy.php","name":"ContentSecurityPolicy.php"},{"path":"APPPATH\\Config\\Cookie.php","name":"Cookie.php"},{"path":"APPPATH\\Config\\Database.php","name":"Database.php"},{"path":"APPPATH\\Config\\Events.php","name":"Events.php"},{"path":"APPPATH\\Config\\Exceptions.php","name":"Exceptions.php"},{"path":"APPPATH\\Config\\Feature.php","name":"Feature.php"},{"path":"APPPATH\\Config\\Filters.php","name":"Filters.php"},{"path":"APPPATH\\Config\\Format.php","name":"Format.php"},{"path":"APPPATH\\Config\\Kint.php","name":"Kint.php"},{"path":"APPPATH\\Config\\Logger.php","name":"Logger.php"},{"path":"APPPATH\\Config\\Mimes.php","name":"Mimes.php"},{"path":"APPPATH\\Config\\Modules.php","name":"Modules.php"},{"path":"APPPATH\\Config\\Optimize.php","name":"Optimize.php"},{"path":"APPPATH\\Config\\Paths.php","name":"Paths.php"},{"path":"APPPATH\\Config\\Routes.php","name":"Routes.php"},{"path":"APPPATH\\Config\\Routing.php","name":"Routing.php"},{"path":"APPPATH\\Config\\Services.php","name":"Services.php"},{"path":"APPPATH\\Config\\Toolbar.php","name":"Toolbar.php"},{"path":"APPPATH\\Config\\UserAgents.php","name":"UserAgents.php"},{"path":"APPPATH\\Config\\Validation.php","name":"Validation.php"},{"path":"APPPATH\\Config\\View.php","name":"View.php"},{"path":"APPPATH\\Controllers\\api\\AttendanceController.php","name":"AttendanceController.php"},{"path":"APPPATH\\Filters\\Cors.php","name":"Cors.php"},{"path":"APPPATH\\Models\\AttendanceModel.php","name":"AttendanceModel.php"},{"path":"FCPATH\\index.php","name":"index.php"},{"path":"VENDORPATH\\autoload.php","name":"autoload.php"},{"path":"VENDORPATH\\composer\\ClassLoader.php","name":"ClassLoader.php"},{"path":"VENDORPATH\\composer\\InstalledVersions.php","name":"InstalledVersions.php"},{"path":"VENDORPATH\\composer\\autoload_real.php","name":"autoload_real.php"},{"path":"VENDORPATH\\composer\\autoload_static.php","name":"autoload_static.php"},{"path":"VENDORPATH\\composer\\installed.php","name":"installed.php"},{"path":"VENDORPATH\\composer\\platform_check.php","name":"platform_check.php"},{"path":"VENDORPATH\\laminas\\laminas-escaper\\src\\Escaper.php","name":"Escaper.php"},{"path":"VENDORPATH\\laminas\\laminas-escaper\\src\\EscaperInterface.php","name":"EscaperInterface.php"},{"path":"VENDORPATH\\myclabs\\deep-copy\\src\\DeepCopy\\deep_copy.php","name":"deep_copy.php"},{"path":"VENDORPATH\\phpunit\\phpunit\\src\\Framework\\Assert\\Functions.php","name":"Functions.php"},{"path":"VENDORPATH\\psr\\log\\src\\LogLevel.php","name":"LogLevel.php"},{"path":"VENDORPATH\\psr\\log\\src\\LoggerInterface.php","name":"LoggerInterface.php"},{"path":"VENDORPATH\\symfony\\deprecation-contracts\\function.php","name":"function.php"}]},"badgeValue":172,"isEmpty":false,"hasTabContent":true,"hasLabel":false,"icon":"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGBSURBVEhL7ZQ9S8NQGIVTBQUncfMfCO4uLgoKbuKQOWg+OkXERRE1IAXrIHbVDrqIDuLiJgj+gro7S3dnpfq88b1FMTE3VZx64HBzzvvZWxKnj15QCcPwCD5HUfSWR+JtzgmtsUcQBEva5IIm9SwSu+95CAWbUuy67qBa32ByZEDpIaZYZSZMjjQuPcQUq8yEyYEb8FSerYeQVGbAFzJkX1PyQWLhgCz0BxTCekC1Wp0hsa6yokzhed4oje6Iz6rlJEkyIKfUEFtITVtQdAibn5rMyaYsMS+a5wTv8qeXMhcU16QZbKgl3hbs+L4\/pnpdc87MElZgq10p5DxGdq8I7xrvUWUKvG3NbSK7ubngYzdJwSsF7TiOh9VOgfcEz1UayNe3JUPM1RWC5GXYgTfc75B4NBmXJnAtTfpABX0iPvEd9ezALwkplCFXcr9styiNOKc1RRZpaPM9tcqBwlWzGY1qPL9wjqRBgF5BH6j8HWh2S7MHlX8PrmbK+k\/8PzjOOzx1D3i1pKTTAAAAAElFTkSuQmCC","hasTimelineData":false,"timelineData":[]},{"title":"Routes","titleSafe":"routes","titleDetails":"","display":{"matchedRoute":[{"directory":"","controller":"\\App\\Controllers\\api\\AttendanceController","method":"checkout","paramCount":0,"truePCount":0,"params":[]}],"routes":[{"method":"GET","route":"\/","handler":"\\App\\Controllers\\Home::index"},{"method":"GET","route":"api\/users","handler":"\\App\\Controllers\\api\\Users::index"},{"method":"GET","route":"api\/users\/([0-9]+)","handler":"\\App\\Controllers\\api\\Users::show\/$1"},{"method":"GET","route":"api\/attendance\/history\/([0-9]+)","handler":"\\App\\Controllers\\api\\AttendanceController::history\/$1"},{"method":"GET","route":"api\/overtime\/history\/([0-9]+)","handler":"\\App\\Controllers\\api\\OvertimeController::history\/$1"},{"method":"GET","route":"api\/admin\/employees","handler":"\\App\\Controllers\\api\\AdminController::getAllEmployees"},{"method":"GET","route":"api\/admin\/dashboard-summary","handler":"\\App\\Controllers\\api\\AdminController::dashboardSummary"},{"method":"GET","route":"api\/admin\/attendance-history","handler":"\\App\\Controllers\\api\\AdminController::getAllAttendanceHistory"},{"method":"GET","route":"api\/admin\/overtime-history","handler":"\\App\\Controllers\\api\\AdminController::getAllOvertimeHistory"},{"method":"POST","route":"api\/auth\/login","handler":"\\App\\Controllers\\api\\Auth::login"},{"method":"POST","route":"api\/users\/upload\/([0-9]+)","handler":"\\App\\Controllers\\api\\Users::uploadProfilePicture\/$1"},{"method":"POST","route":"api\/attendance\/checkin","handler":"\\App\\Controllers\\api\\AttendanceController::checkin"},{"method":"POST","route":"api\/attendance\/checkout","handler":"\\App\\Controllers\\api\\AttendanceController::checkout"},{"method":"POST","route":"api\/attendance\/validate-wfo-ip","handler":"\\App\\Controllers\\api\\AttendanceController::validateWfoIp"},{"method":"POST","route":"api\/overtime\/submit","handler":"\\App\\Controllers\\api\\OvertimeController::submit"},{"method":"POST","route":"api\/admin\/employees","handler":"\\App\\Controllers\\api\\AdminController::createEmployee"},{"method":"PUT","route":"api\/admin\/employees\/([0-9]+)","handler":"\\App\\Controllers\\api\\AdminController::updateEmployee\/$1"},{"method":"PUT","route":"api\/admin\/overtime\/status\/([0-9]+)","handler":"\\App\\Controllers\\api\\AdminController::updateOvertimeStatus\/$1"}]},"badgeValue":7,"isEmpty":false,"hasTabContent":true,"hasLabel":false,"icon":"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFDSURBVEhL7ZRNSsNQFIUjVXSiOFEcuQIHDpzpxC0IGYeE\/BEInbWlCHEDLsSiuANdhKDjgm6ggtSJ+l25ldrmmTwIgtgDh\/t37r1J+16cX0dRFMtpmu5pWAkrvYjjOB7AETzStBFW+inxu3KUJMmhludQpoflS1zXban4LYqiO224h6VLTHr8Z+z8EpIHFF9gG78nDVmW7UgTHKjsCyY98QP+pcq+g8Ku2s8G8X3f3\/I8b038WZTp+bO38zxfFd+I6YY6sNUvFlSDk9CRhiAI1jX1I9Cfw7GG1UB8LAuwbU0ZwQnbRDeEN5qqBxZMLtE1ti9LtbREnMIuOXnyIf5rGIb7Wq8HmlZgwYBH7ORTcKH5E4mpjeGt9fBZcHE2GCQ3Vt7oTNPNg+FXLHnSsHkw\/FR+Gg2bB8Ptzrst\/v6C\/wrH+QB+duli6MYJdQAAAABJRU5ErkJggg==","hasTimelineData":false,"timelineData":[]},{"title":"Events","titleSafe":"events","titleDetails":"","display":{"events":{"pre_system":{"event":"pre_system","duration":"105.16","count":1},"DBQuery":{"event":"DBQuery","duration":"0.07","count":2}}},"badgeValue":3,"isEmpty":false,"hasTabContent":true,"hasLabel":false,"icon":"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAEASURBVEhL7ZXNDcIwDIVTsRBH1uDQDdquUA6IM1xgCA6MwJUN2hk6AQzAz0vl0ETUxC5VT3zSU5w81\/mRMGZysixbFEVR0jSKNt8geQU9aRpFmp\/keX6AbjZ5oB74vsaN5lSzA4tLSjpBFxsjeSuRy4d2mDdQTWU7YLbXTNN05mKyovj5KL6B7q3hoy3KwdZxBlT+Ipz+jPHrBqOIynZgcZonoukb\/0ckiTHqNvDXtXEAaygRbaB9FvUTjRUHsIYS0QaSp+Dw6wT4hiTmYHOcYZsdLQ2CbXa4ftuuYR4x9vYZgdb4vsFYUdmABMYeukK9\/SUme3KMFQ77+Yfzh8eYF8+orDuDWU5LAAAAAElFTkSuQmCC","hasTimelineData":true,"timelineData":[{"name":"Event: pre_system","component":"Events","start":1754289418.601881,"duration":0.10516190528869629},{"name":"Event: DBQuery","component":"Events","start":1754289419.127582,"duration":3.600120544433594e-5},{"name":"Event: DBQuery","component":"Events","start":1754289419.201198,"duration":3.695487976074219e-5}]}],"vars":{"varData":{"View Data":[]},"post":{"user_id":"7","latitude":"37.4219983","longitude":"-122.084","address":"Google Building 43, Amphitheatre Parkway","checkout_checklist":"import &#039;dart:async&#039;;\nimport &#039;dart:io&#039;;\nimport &#039;package:absensi\/pegawai\/screens\/dashboard_screen.dart&#039;;\nimport &#039;package:flutter\/material.dart&#039;;\nimport &#039;package:camera\/camera.dart&#039;;\nimport &#039;package:geolocator\/geolocator.dart&#039;;\nimport &#039;package:geocoding\/geocoding.dart&#039;;\nimport &#039;package:google_maps_flutter\/google_maps_flutter.dart&#039;;\nimport &#039;package:absensi\/services\/api_service.dart&#039;;\nimport &#039;package:intl\/intl.dart&#039;;\nimport &#039;package:shared_preferences\/shared_preferences.dart&#039;;\n\nclass OverTimeScreen extends StatefulWidget {\n  const OverTimeScreen({super.key});\n\n  @override\n  State&lt;OverTimeScreen&gt; createState() =&gt; _OverTimeScreenState();\n}\n\nclass _OverTimeScreenState extends State&lt;OverTimeScreen&gt; {\n  \/\/ BARU: Satu Future untuk mengelola semua proses inisialisasi\n  late Future&lt;void&gt; _initializationFuture;\n\n  \/\/ State lainnya tetap sama\n  CameraController? _cameraController;\n  XFile? _capturedImage;\n  Position? _currentPosition;\n  String _currentAddress = &quot;Memuat alamat...&quot;;\n  final Completer&lt;GoogleMapController&gt; _mapController = Completer();\n  final _formKey = GlobalKey&lt;FormState&gt;();\n  String? _selectedOvertimeType;\n  bool _isSubmitting = false;\n  DateTime? _startDate;\n  DateTime? _endDate;\n  TimeOfDay? _startTime;\n  TimeOfDay? _endTime;\n  final ApiService _apiService = ApiService();\n  List&lt;dynamic&gt; _userList = [];\n  Map&lt;String, dynamic&gt;? _selectedCoworker;\n  bool _showRekanKerjaField = false;\n  final _keteranganController = TextEditingController();\n\n\n  final List&lt;String&gt; _overtimeTypes = [\n    &#039;Hari Kerja&#039;, &#039;Hari Libur&#039;, &#039;Hari Libur Nasional&#039;, &#039;Backup Teman Kerja&#039;\n  ];\n\n  @override\n  void initState() {\n    super.initState();\n    \/\/ Panggil satu fungsi utama untuk memulai semua proses async\n    _initializationFuture = _initializePage();\n  }\n\n  @override\n  void dispose() {\n    _cameraController?.dispose();\n    _keteranganController.dispose();\n    super.dispose();\n  }\n\n  \/\/ --- LOGIKA UTAMA ---\n\n  \/\/ BARU: Fungsi ini menggabungkan semua tugas berat\n  Future&lt;void&gt; _initializePage() async {\n    try {\n      \/\/ Jalankan semua proses secara bersamaan untuk efisiensi\n      await Future.wait([\n        _initializeCamera(),\n        _initializeLocation(),\n        _fetchUsers(),\n      ]);\n    } catch (e) {\n      \/\/ Jika salah satu gagal, seluruh Future akan gagal dan ditangkap oleh FutureBuilder\n      throw Exception(&#039;Gagal memuat halaman: ${e.toString().replaceAll(&quot;Exception: &quot;, &quot;&quot;)}&#039;);\n    }\n  }\n\n  Future&lt;void&gt; _fetchUsers() async {\n    try {\n      final users = await _apiService.fetchUsers();\n      if (mounted) {\n        setState(() =&gt; _userList = users);\n      }\n    } catch (e) {\n      print(&quot;Gagal memuat pengguna: $e&quot;);\n    }\n  }\n\n  Future&lt;void&gt; _initializeCamera() async {\n    try {\n      final cameras = await availableCameras();\n      final firstCamera = cameras.firstWhere(\n          (camera) =&gt; camera.lensDirection == CameraLensDirection.front,\n          orElse: () =&gt; cameras.first);\n      _cameraController = CameraController(firstCamera, ResolutionPreset.medium);\n      await _cameraController!.initialize();\n    } catch (e) {\n      print(&quot;Error inisialisasi kamera: $e&quot;);\n      throw Exception(&#039;Gagal memuat kamera&#039;);\n    }\n  }\n\n  Future&lt;void&gt; _initializeLocation() async {\n    try {\n      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();\n      if (!serviceEnabled) throw Exception(&#039;Layanan lokasi (GPS) tidak aktif.&#039;);\n\n      LocationPermission permission = await Geolocator.checkPermission();\n      if (permission == LocationPermission.denied) {\n        permission = await Geolocator.requestPermission();\n        if (permission == LocationPermission.denied) {\n          throw Exception(&#039;Izin lokasi ditolak.&#039;);\n        }\n      }\n      if (permission == LocationPermission.deniedForever) {\n        throw Exception(&#039;Izin lokasi ditolak permanen. Mohon aktifkan dari pengaturan aplikasi.&#039;);\n      }\n\n      Position position = await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.high);\n      List&lt;Placemark&gt; placemarks = await placemarkFromCoordinates(position.latitude, position.longitude);\n      \n      if (mounted) {\n        setState(() {\n          _currentPosition = position;\n          _currentAddress = &quot;${placemarks[0].street}, ${placemarks[0].subLocality}, ${placemarks[0].locality}&quot;;\n        });\n      }\n    } catch (e) {\n      if(mounted) {\n        setState(() =&gt; _currentAddress = &quot;Gagal mendapatkan lokasi&quot;);\n      }\n      throw Exception(e.toString());\n    }\n  }\n\n  Future&lt;void&gt; _takePicture() async {\n    if (_cameraController == null || !_cameraController!.value.isInitialized) return;\n    try {\n      final image = await _cameraController!.takePicture();\n      if (mounted) setState(() =&gt; _capturedImage = image);\n    } catch (e) {\n      print(&quot;Error mengambil gambar: $e&quot;);\n    }\n  }\n\n  Future&lt;void&gt; _selectDate(BuildContext context, bool isStartDate) async {\n    final DateTime? picked = await showDatePicker(\n      context: context, initialDate: DateTime.now(), firstDate: DateTime(2020), lastDate: DateTime(2030),\n    );\n    if (picked != null &amp;&amp; mounted) {\n      setState(() =&gt; isStartDate ? _startDate = picked : _endDate = picked);\n    }\n  }\n\n  Future&lt;void&gt; _selectTime(BuildContext context, bool isStartTime) async {\n    final TimeOfDay? picked = await showTimePicker(\n      context: context, initialTime: TimeOfDay.now(),\n      builder: (context, child) =&gt; MediaQuery(data: MediaQuery.of(context).copyWith(alwaysUse24HourFormat: true), child: child!),\n    );\n    if (picked != null &amp;&amp; mounted) {\n      setState(() =&gt; isStartTime ? _startTime = picked : _endTime = picked);\n    }\n  }\n\n  Future&lt;void&gt; _submitOvertime() async {\n  \/\/ 1. Validasi form\n  if (!_formKey.currentState!.validate()) return;\n  if (_capturedImage == null) {\n    ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text(&#039;Bukti lembur (foto) wajib diisi.&#039;), backgroundColor: Colors.red));\n    return;\n  }\n  \/\/ Validasi tambahan untuk tanggal dan waktu\n  if (_startDate == null || _endDate == null || _startTime == null || _endTime == null) {\n    ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text(&#039;Semua tanggal dan waktu wajib diisi.&#039;), backgroundColor: Colors.red));\n    return;\n  }\n\n  if (mounted) setState(() =&gt; _isSubmitting = true);\n\n  try {\n    \/\/ 2. Ambil User ID\n    final prefs = await SharedPreferences.getInstance();\n    final userId = prefs.getInt(&#039;user_id&#039;);\n    if (userId == null) {\n      throw Exception(&quot;Sesi berakhir. Mohon login kembali.&quot;);\n    }\n    \n    \/\/ Ambil ID rekan kerja jika ada\n    final coworkerId = _selectedCoworker?[&#039;id&#039;];\n\n    \/\/ 3. Kirim data ke API\n    await _apiService.submitOvertime(\n        userId: userId,\n        overtimeType: _selectedOvertimeType!,\n        startDate: _startDate!,\n        endDate: _endDate!,\n        startTime: _startTime!,\n        endTime: _endTime!,\n        keterangan: _keteranganController.text,\n        imageFile: File(_capturedImage!.path),\n        position: _currentPosition!,\n        address: _currentAddress,\n        coworkerId: coworkerId != null ? int.parse(coworkerId.toString()) : null,\n    );\n\n    \/\/ 4. Handle respons jika berhasil\n\n    if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text(&#039;Pengajuan lembur berhasil dikirim!&#039;), backgroundColor: Colors.green));\n        \n        \/\/ Navigasi kembali ke DashboardScreen dan hapus semua halaman di atasnya\n        Navigator.of(context).pushAndRemoveUntil(\n         MaterialPageRoute(builder: (context) =&gt; const DashboardScreen()),\n         (Route&lt;dynamic&gt; route) =&gt; false,\n       );\n    }\n\n  } catch (e) {\n    \/\/ 5. Handle jika terjadi error\n    if (mounted) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text(e.toString().replaceAll(&quot;Exception: &quot;, &quot;&quot;)), backgroundColor: Colors.red)\n      );\n    }\n  } finally {\n    \/\/ Pastikan loading indicator berhenti\n    if (mounted) {\n      setState(() =&gt; _isSubmitting = false);\n    }\n  }\n}\n\n  \/\/ --- UI (Tampilan) ---\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text(&#039;Pengajuan Lembur&#039;),\n        backgroundColor: Colors.indigo,\n        foregroundColor: Colors.white,\n      ),\n      body: FutureBuilder&lt;void&gt;(\n        future: _initializationFuture,\n        builder: (context, snapshot) {\n          \/\/ Saat inisialisasi sedang berjalan\n          if (snapshot.connectionState == ConnectionState.waiting) {\n            return const Center(\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  CircularProgressIndicator(),\n                  SizedBox(height: 16),\n                  Text(&quot;Mempersiapkan halaman...&quot;),\n                ],\n              ),\n            );\n          }\n\n          \/\/ Jika terjadi error saat inisialisasi\n          if (snapshot.hasError) {\n            return Center(\n              child: Padding(\n                padding: const EdgeInsets.all(20.0),\n                child: Text(\n                  &quot;Gagal memuat halaman:\\n${snapshot.error.toString().replaceAll(&quot;Exception: &quot;, &quot;&quot;)}&quot;,\n                  textAlign: TextAlign.center,\n                  style: const TextStyle(color: Colors.red, fontSize: 16),\n                ),\n              ),\n            );\n          }\n\n          \/\/ Jika inisialisasi berhasil, tampilkan form\n          return _buildOvertimeForm();\n        },\n      ),\n    );\n  }\n\n  Widget _buildOvertimeForm() {\n    return SingleChildScrollView(\n      padding: const EdgeInsets.all(16.0),\n      child: Form(\n        key: _formKey,\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.stretch,\n          children: [\n            _buildSectionCard(\n              title: &#039;Detail Lembur&#039;,\n              icon: Icons.work_history_outlined,\n              content: Column(\n                children: [\n                  DropdownButtonFormField&lt;String&gt;(\n                    value: _selectedOvertimeType,\n                    hint: const Text(&#039;Pilih jenis lembur&#039;),\n                    items: _overtimeTypes.map((String value) =&gt; DropdownMenuItem&lt;String&gt;(value: value, child: Text(value))).toList(),\n                    onChanged: (newValue) {\n                      setState(() {\n                        _selectedOvertimeType = newValue;\n                        _showRekanKerjaField = (newValue == &#039;Backup Teman Kerja&#039;);\n                        _selectedCoworker = null;\n                      });\n                    },\n                    validator: (value) =&gt; value == null ? &#039;Jenis lembur wajib dipilih&#039; : null,\n                    decoration: const InputDecoration(border: OutlineInputBorder(), contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8)),\n                  ),\n                  \n                  if (_showRekanKerjaField)\n                    Padding(\n                      padding: const EdgeInsets.only(top: 16.0),\n                      child: _userList.isEmpty\n                          ? const Center(child: Text(&quot;Tidak ada data rekan kerja.&quot;))\n                          : DropdownButtonFormField&lt;Map&lt;String, dynamic&gt;&gt;(\n                              value: _selectedCoworker, isExpanded: true,\n                              hint: const Text(&#039;Pilih Rekan Kerja&#039;),\n                              items: _userList.map((user) =&gt; DropdownMenuItem&lt;Map&lt;String, dynamic&gt;&gt;(\n                                value: user,\n                                child: Text(user[&#039;name&#039;] ?? &#039;Nama Tidak Ada&#039;),\n                              )).toList(),\n                              onChanged: (newValue) =&gt; setState(() =&gt; _selectedCoworker = newValue),\n                              validator: (value) =&gt; (_showRekanKerjaField &amp;&amp; value == null) ? &#039;Rekan kerja wajib dipilih&#039; : null,\n                              decoration: const InputDecoration(labelText: &#039;Nama Rekan Kerja&#039;, border: OutlineInputBorder()),\n                            ),\n                    ),\n                  const SizedBox(height: 16),\n                  Row(\n                    children: [\n                      Expanded(child: _buildDatePickerField(context, &#039;Tanggal Mulai&#039;, _startDate, true)),\n                      const SizedBox(width: 16),\n                      Expanded(child: _buildDatePickerField(context, &#039;Tanggal Selesai&#039;, _endDate, false)),\n                    ],\n                  ),\n                  const SizedBox(height: 16),\n                  Row(\n                    children: [\n                      Expanded(child: _buildTimePickerField(context, &#039;Waktu Mulai&#039;, _startTime, true)),\n                      const SizedBox(width: 16),\n                      Expanded(child: _buildTimePickerField(context, &#039;Waktu Selesai&#039;, _endTime, false)),\n                    ],\n                  ),\n                  const SizedBox(height: 16),\n                  \/\/ --- PENAMBAHAN FIELD KETERANGAN ---\n                  TextFormField(\n                    controller: _keteranganController,\n                    decoration: const InputDecoration(\n                      labelText: &#039;Keterangan Lembur&#039;,\n                      hintText: &#039;Contoh: Menyelesaikan laporan bulanan&#039;,\n                      border: OutlineInputBorder(),\n                    ),\n                    validator: (value) {\n                      if (value == null || value.isEmpty) {\n                        return &#039;Keterangan wajib diisi&#039;;\n                      }\n                      return null;\n                    },\n                    maxLines: 3,\n                  ),\n                ],\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildSectionCard(\n              title: &#039;Bukti Lembur (Foto Wajah)&#039;,\n              icon: Icons.camera_alt_outlined,\n              content: Column(\n                children: [\n                  Container(\n                    height: 300, width: double.infinity, clipBehavior: Clip.antiAlias,\n                    decoration: BoxDecoration(color: Colors.black, border: Border.all(color: Colors.grey.shade300), borderRadius: BorderRadius.circular(8)),\n                    child: _capturedImage != null\n                        ? Image.file(File(_capturedImage!.path), fit: BoxFit.cover)\n                        : (_cameraController != null &amp;&amp; _cameraController!.value.isInitialized)\n                            ? CameraPreview(_cameraController!)\n                            : const Center(child: Text(&quot;Kamera tidak tersedia&quot;, style: TextStyle(color: Colors.white))),\n                  ),\n                  const SizedBox(height: 8),\n                  ElevatedButton.icon(\n                    onPressed: _takePicture,\n                    icon: const Icon(Icons.camera),\n                    label: Text(_capturedImage == null ? &#039;Ambil Gambar&#039; : &#039;Ambil Ulang&#039;),\n                  ),\n                ],\n              ),\n            ),\n            const SizedBox(height: 16),\n            _buildSectionCard(\n              title: &#039;Lokasi Lembur&#039;,\n              icon: Icons.location_on_outlined,\n              content: Column(\n                children: [\n                  SizedBox(\n                    height: 200, width: double.infinity,\n                    child: _currentPosition == null\n                        ? Center(child: Text(_currentAddress))\n                        : ClipRRect(\n                            borderRadius: BorderRadius.circular(8),\n                            child: GoogleMap(\n                              mapType: MapType.normal,\n                              initialCameraPosition: CameraPosition(target: LatLng(_currentPosition!.latitude, _currentPosition!.longitude), zoom: 17.0),\n                              markers: {Marker(markerId: const MarkerId(&#039;currentLocation&#039;), position: LatLng(_currentPosition!.latitude, _currentPosition!.longitude))},\n                              onMapCreated: (GoogleMapController controller) { if (!_mapController.isCompleted) _mapController.complete(controller); },\n                              zoomGesturesEnabled: false, scrollGesturesEnabled: false,\n                            ),\n                          ),\n                  ),\n                  const SizedBox(height: 8),\n                  Text(_currentAddress, textAlign: TextAlign.center, style: const TextStyle(fontSize: 12)),\n                ],\n              ),\n            ),\n            const SizedBox(height: 24),\n            ElevatedButton(\n              onPressed: _isSubmitting ? null : _submitOvertime,\n              style: ElevatedButton.styleFrom(\n                padding: const EdgeInsets.symmetric(vertical: 16), backgroundColor: Colors.indigo, foregroundColor: Colors.white,\n                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n              ),\n              child: _isSubmitting\n                  ? const SizedBox(height: 20, width: 20, child: CircularProgressIndicator(color: Colors.white, strokeWidth: 3))\n                  : const Text(&#039;AJUKAN LEMBUR&#039;, style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  \/\/ --- Helper Widgets ---\n  Widget _buildSectionCard({required String title, required IconData icon, required Widget content}) {\n    return Card(\n      elevation: 2, shadowColor: Colors.grey.withOpacity(0.2),\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Row(\n              children: [\n                Icon(icon, color: Colors.indigo.shade700, size: 20),\n                const SizedBox(width: 8),\n                Text(title, style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),\n              ],\n            ),\n            const Divider(height: 24, thickness: 1, color: Color.fromARGB(255, 236, 236, 236)),\n            content,\n          ],\n        ),\n      ),\n    );\n  }\n  \n  Widget _buildDatePickerField(BuildContext context, String label, DateTime? date, bool isStartDate) {\n    return InkWell(\n      onTap: () =&gt; _selectDate(context, isStartDate),\n      child: InputDecorator(\n        decoration: InputDecoration(\n          labelText: label, border: const OutlineInputBorder(), contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 16),\n        ),\n        child: Text(\n          date != null ? DateFormat(&#039;dd-MM-yyyy&#039;).format(date) : &#039;Pilih tanggal&#039;,\n          style: TextStyle(fontSize: 16, color: date == null ? Colors.grey.shade600 : Colors.black),\n        ),\n      ),\n    );\n  }\n  \n  Widget _buildTimePickerField(BuildContext context, String label, TimeOfDay? time, bool isStartTime) {\n    return InkWell(\n      onTap: () =&gt; _selectTime(context, isStartTime),\n      child: InputDecorator(\n        decoration: InputDecoration(\n          labelText: label, border: const OutlineInputBorder(), contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 16),\n        ),\n        child: Text(\n          time != null ? time.format(context) : &#039;Pilih waktu&#039;,\n          style: TextStyle(fontSize: 16, color: time == null ? Colors.grey.shade600 : Colors.black),\n        ),\n      ),\n    );\n  }\n}\n"},"headers":{"Content-Type":"multipart\/form-data; boundary=dart-http-boundary-fg3rAN6QHiyeGhg_mj4ZRz9FzM_pts9KxigyXSIcAsxtgktuZEM","User-Agent":"Dart\/3.7 (dart:io)","Accept-Encoding":"gzip","Content-Length":"27437","Host":"10.0.2.2:8080"},"request":"HTTP\/1.1","response":{"statusCode":200,"reason":"OK","contentType":"application\/json; charset=UTF-8","headers":{"Cache-Control":"no-store, max-age=0, no-cache","Content-Type":"application\/json; charset=UTF-8"}}},"config":{"ciVersion":"4.6.1","phpVersion":"8.3.16","phpSAPI":"cli-server","environment":"development","baseURL":"http:\/\/localhost:8080\/","timezone":"Asia\/Jakarta","locale":"en","cspEnabled":false}}